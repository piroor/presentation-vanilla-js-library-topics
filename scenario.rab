= バニラJS開発\nライブラリー事情

: theme
   clear-code

: author
   結城洋志 aka Piro\n
   github.com/piroor\n
   x.com/piro_or

: institution
    株式会社クリアコード

: allotted_time
    5m

= 活動1：シェルコマンド解説漫画

  # image
  # src = ./images/systemadmingirl.jpg
  # relative_width = 40

== プロパティー

: enable-title-on-image
   false

= 活動2：Firefoxアドオン\nTree Style Tabなど

  # image
  # src = ./images/tst.png
  # relative_width = 70

== プロパティー

: enable-title-on-image
   false

= Firefox\nアドオンを\nバニラJSで

= なんでバニラJS？

(('wait'))昔のFirefoxアドオンは\n
「動的なパッチ」だった

* (('wait'))Firefox本体のスクリプトの\n
  名前空間に変数や関数を注入
* (('wait'))静的解析しにくい
* (('wait'))下手にライブラリーを使うと\n
  名前空間汚染でFirefoxが壊れる

= なぜライブラリー自作？

* (('wait'))ニッチすぎて既存の物が無い
  * Firefoxの内部実装に強く依存
  * 設定読み書き, UIの多言語対応, etc.
* (('wait'))既製UIライブラリーは\n
  自我が強すぎる
  * メニューUIなど
  * FirefoxのUI＝ネイティブUIに\n
    馴染むUIウィジェットが欲しい

= ライブラリーができるまでの流れ

* (('wait'))複数アドオンで共通して\n
  実現したい機能が出てくる
* (('wait'))→関数やクラスを\n
  　単体のファイルに切り出す
* (('wait'))→README, LICENSEを付けて\n
  　GitHubで公開

= できるもの

* (('wait'))数十～数百行程度
* (('wait'))他のライブラリーに非依存
  * Firefox専用だからpolyfillも不要
* (('wait'))パッケージマネージャーの\n
  必要性が薄い

= ていうか……

  # image
  # src = ./images/lifetime.png
  # relative_width = 90

(('wait'))早死にされそうで不安

== プロパティー

: enable-title-on-image
   false

= そんなライブラリーの使い方

* (('wait'))Gitのサブモジュール
    git submodule add <URL> submodules/<name>

= ビルド・パッケージング時

* (('wait'))Makefileのmake rule中で\n
  ファイルをコピーするだけ
    xpi:
      cp submodules/webextensions-lib-configs/Configs.js extlib/
      zip -r -9 treestyletab.xpi manifest.json ... extlib
* (('wait'))コピー後のファイルは\n
  .gitignore、.eslintignoreで\n
  除外

= ライブラリーのロード

* (('wait'))<script src="..."> で\n
  同じ名前空間にロード
* (('wait'))または、ES Modulesのimport
* (('wait'))コピー後に小加工して両対応
    xpi:
      cp submodules/webextensions-lib-configs/Configs.js extlib/
      echo 'export default Configs;' >> extlib/Configs.js
      ...

= どうする\nのが正解\nなのか？


= ちなみに、今の\nFirefoxアドオン開発

* Chromiumと同様のモデル\n
  （WebExtensions）
  * 名前空間が完全に分離された
  * ライブラリも安全に読み込める
  * みんなTypeScriptで書いてる

今さらバニラJSの必要性は皆無\n
（オチ）
